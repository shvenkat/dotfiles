#!/usr/bin/env python3

"""Manage a directory of tasks list files in Github-flavored markdown.

Usage:


    todo -n|--next        [options] [dir-path]
    todo -i|--interactive [options] [dir-path]

Options:

-p|--priority n    Only display projects with priority at least n.
-m|--max n         Only display n tasks per file.
"""
import curses
import datetime
import enum
import os
import shlex
import subprocess as sp
import sys
import textwrap
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from pathlib import Path
from typing import Dict, List, NamedTuple, Tuple


def main() -> None:
    """Parse arguments and dispatch accordingly."""
    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        description="Manage a directory of tasks list files in Github-flavored markdown.",
        epilog=textwrap.dedent(
            """
        Task file format:

            # Blah blah...

            - [x]  yy/mm/dd  Task summary. Multiple lines are allowed, but the
                             first one is displayed.

            ## Yada yada...

            - [ ]  today     Current day in local timezone.
            - [ ]  next      Tomorrow.
            - [ ]  today+7   Seven days from today.
            - [ ]  someday   No due date.

        Format notes:

        * '[ ]' = task not started.
          '[x]' = task completed,
          '[~]' = task cancelled prior to completion,
          '[.]' = task in progress.
        * Due date can be absolute (yy/mm/dd), relative to today (today+n) or
          unspecified (someday).
        * Lines other than section header lines (starting with '#') and task
          lines (starting with '- [') are ignored. So header lines and tasks can
          be freely mixed with text notes and any other markdown syntax.

        Task editing:

        To edit tasks, set the environment variable EDITOR and use 'e' to edit
        the selected task, section or file."""
        ),
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "-n", "--next", action="store_true", help="Print next tasks and exit."
    )
    group.add_argument(
        "-i",
        "--interactive",
        action="store_true",
        help="View and edit tasks interactively.",
    )
    parser.add_argument(
        "-p",
        "--priority",
        type=int,
        default=0,
        help="Minimum priority of tasks to display or work on.",
    )
    parser.add_argument(
        "-m",
        "--max",
        type=int,
        default=1,
        help="Maximum number of tasks per markdown file to be displayed.",
    )
    parser.add_argument(
        "path", type=Path, help="Directory of .md task list files."
    )
    args = parser.parse_args()
    if args.next:
        show_next_tasks(
            path=args.path, min_priority=args.priority, max_tasks=args.max
        )
    else:
        interact(
            dir_path=args.path, min_priority=args.priority, max_tasks=args.max
        )


def show_next_tasks(path: Path, min_priority: int, max_tasks: int) -> None:
    """One-shot listing of the next tasks.

    Args:
        path: Path of the directory of task list files.
        min_priority: Minimum priority of the projects to display.
        max_tasks: Maximum number to tasks to display per markdown section.
    """
    priorities = find_task_files(path, min_priority=min_priority)
    task_groups = {path: read_task_groups(path) for path in priorities.keys()}
    sys.stdout.write(
        "\n".join(
            line
            for line, _ in format_task_groups(
                task_groups,
                priorities,
                max_tasks=max_tasks,
                use_ansi=os.isatty(1),
            )
        )
        + "\n"
    )


def find_task_files(path: Path, min_priority: int) -> Dict[Path, int]:
    """Searches the given directory for .md files at any depth.

    Args:
        path: Path of the directory of task list files.
        min_priority: Minimum priority, below which files (projects) will be excluded.

    Returns:
        Task file paths and their priorities.
    """
    paths = list(path.glob("**/*.md"))
    priorities = {
        path: int(path.stem.split("_")[0])
        for path in paths
        if all(x in "0123456789" for x in path.stem.split("_")[0])
    }
    return {
        path: priority
        for path, priority in priorities.items()
        if priority >= min_priority
    }


class Status(enum.Enum):
    not_done = " "
    in_progress = "."
    done = "x"
    cancelled = "~"


class FileLine(NamedTuple):
    """Represents the file and (1-based) line corresponding to a task, group or
    project.
    """

    path: Path
    line_number: int


class Task(NamedTuple):
    """A task list item corresponding to a line in a file, beginning with '- ['.
    """

    text: str
    status: Status
    date: datetime.date
    source: FileLine


class TaskGroup(NamedTuple):
    """A group of tasks within the same markdown section of a file."""

    name: str
    tasks: List[Task]
    source: FileLine


def read_task_groups(path: Path) -> List[TaskGroup]:
    """Reads task lists from path, grouping tasks by markdown section.

    Args:
        path: Task file.

    Returns:
        Task items, grouped by markdown section.
    """

    def parse_status(line: str) -> Status:  # pylint: disable=all
        return Status(line[line.index("[") + 1])

    def parse_date(line: str) -> datetime.date:  # pylint: disable=all
        date_text = line.lstrip()[5:].split()[0]
        if "/" in date_text:
            date = datetime.datetime.strptime(date_text, "%y/%m/%d").date()
        elif date_text == "next":
            date = datetime.date.today() + datetime.timedelta(days=1)
        elif date_text == "today":
            date = datetime.date.today()
        elif date_text.startswith("today+"):
            date = datetime.date.today() + datetime.timedelta(
                days=int(date_text[6:])
            )
        elif date_text == "someday":
            date = datetime.date.max
        else:
            raise ValueError(f"Invalid date: {line}.")
        return date

    task_groups: List[TaskGroup] = []
    with open(path, "rt") as handle:
        tasks: List[Task] = []
        group_name = ""
        group_line_number = 0
        for i, line in enumerate(handle):
            if line.startswith("#"):
                if tasks:
                    task_groups.append(
                        TaskGroup(
                            name=group_name,
                            tasks=tasks,
                            source=FileLine(
                                path=path, line_number=group_line_number
                            ),
                        )
                    )
                    tasks = []
                group_name = line.rstrip("\n")
                group_line_number = i + 1
            elif line.lstrip().startswith("- ["):
                tasks.append(
                    Task(
                        text=line.rstrip("\n"),
                        status=parse_status(line),
                        date=parse_date(line),
                        source=FileLine(path=path, line_number=i + 1),
                    )
                )
            else:
                continue
        if tasks:
            task_groups.append(
                TaskGroup(
                    name=group_name,
                    tasks=tasks,
                    source=FileLine(path=path, line_number=group_line_number),
                )
            )
    return task_groups


def format_task_groups(
    task_groups: Dict[Path, List[TaskGroup]],
    priorities: Dict[Path, int],
    max_tasks: int,
    use_ansi: bool,
) -> List[Tuple[str, FileLine]]:
    """Pretty-print task groups with file name headers.

    Args:
        task_groups: Map between task files and groups of tasks within.
        priorities: Map between task files and priorities.
        max_tasks: Maximum number to tasks to display per markdown section.
        use_ansi: Whether to highlight the output with ANSI terminal escape sequences.

    Returns:
        Formatted tasks, one per line.
    """
    if use_ansi:
        bold = "\033[1m"
        normal = "\033[0m"
    else:
        bold = ""
        normal = ""
    lines: List[Tuple[str, FileLine]] = []
    for path, priority in sorted(
        priorities.items(), key=lambda pp: pp[1], reverse=True
    ):
        project = " ".join(path.stem.split("_")[1:])
        if lines:
            lines.append((" ", FileLine(path=path, line_number=0)))
        lines.append(
            (
                f"{bold}{project.upper()}  ({priority}){normal}",
                FileLine(path=path, line_number=1),
            )
        )
        tasks = sorted(
            [
                task
                for task_group in task_groups[path]
                for task in task_group.tasks
                if task.status is not Status.done and task.status is not Status.cancelled
            ],
            key=lambda t: (t.date, t.source.line_number),
        )
        if tasks:
            for _, task in zip(range(max_tasks), tasks):
                lines.append((task.text, task.source))
    return lines


def interact(  # pylint: disable=too-many-branches,too-many-statements,too-many-locals
    dir_path: Path, min_priority: int, max_tasks: int
) -> None:
    """Interactive mode for viewing tasks and changing their status.

    Args:
        dir_path: Path of the directory of task list files.
        min_priority: Minimum priority of the projects to display.
        max_tasks: Maximum number to tasks to display per markdown section.

    Usage:
        -pn  Set project priority to n.
        -mn  Set maximum displayed tasks per group to n.
        k    Highlight previous line.
        j    Highlight next line.
        e    Edit task file at highlighted point.
        r    Reload all files and refresh display.
        q    Quit.
    """

    def init_term() -> None:
        """Initialize the terminal for curses."""
        curses.putp("smcup".encode())
        curses.noecho()
        curses.cbreak()
        stdscr.keypad(True)
        try:
            curses.start_color()
        except Exception:  # noqa pylint: disable=broad-except
            pass
        curses.use_default_colors()

    def update_display() -> None:
        stdscr.clear()
        stdscr.addstr(
            0, left_margin, status_line[:max_length], curses.A_STANDOUT
        )
        for i, (line, _) in enumerate(lines):
            if i >= max_lines:
                break
            stdscr.addstr(
                top_margin + i,
                left_margin,
                line[:max_length],
                curses.A_REVERSE if i == selected_line else curses.A_NORMAL,
            )
        help_line = "  ".join(
            [
                "q:quit",
                "j,k:down,up",
                "e:edit",
                "-pN:min priority",
                "-mN:max tasks",
                "r:reload",
            ]
        )
        stdscr.addstr(
            top_margin + max_lines + 1,
            left_margin,
            help_line[: max_length - 1],
            curses.A_NORMAL,
        )
        stdscr.refresh()

    # Init terminal.
    stdscr = curses.initscr()
    init_term()
    left_margin = max(1, int((curses.COLS - 100) / 2))
    top_margin = max(1, int((curses.LINES - 30) / 2))
    max_length = curses.COLS - left_margin
    max_lines = curses.LINES - top_margin - 2
    # Read files and tasks.
    priorities = find_task_files(dir_path, min_priority=min_priority)
    task_groups = {path: read_task_groups(path) for path in priorities.keys()}
    # Initialize state.
    selected_line = 0
    status_line = ""
    # Enter event loop.
    while True:
        # Format tasks
        lines = format_task_groups(
            task_groups, priorities, max_tasks=max_tasks, use_ansi=False
        )
        # Update display.
        update_display()
        # Read key.
        try:
            input_key = stdscr.getkey()
        except Exception:
            input_key = "KEY_RESIZE"
        if input_key == "q":
            break
        elif input_key == "j":
            if selected_line < min(max_lines, len(lines)) - 1:
                selected_line += 1
        elif input_key == "k":
            if selected_line > 0:
                selected_line -= 1
        elif input_key == "e":
            _, fileline = lines[selected_line]
            path = fileline.path
            editor_cmd = shlex.split(os.environ.get("EDITOR", ""))
            if not editor_cmd:
                status_line = "Set EDITOR environment variable to edit tasks."
            else:
                sp.run(editor_cmd + [f"+{fileline.line_number}", str(path)])
            task_groups[path] = read_task_groups(path)
            init_term()
            left_margin = max(1, int((curses.COLS - 100) / 2))
            top_margin = max(1, int((curses.LINES - 30) / 2))
            max_length = curses.COLS - left_margin
            max_lines = curses.LINES - top_margin - 2
            selected_line = 0
        elif input_key == "-":
            input_key = stdscr.getkey()
            if input_key == "p":
                input_key = stdscr.getkey()
                if input_key in "0123456789":
                    min_priority = int(input_key)
                    priorities = find_task_files(
                        dir_path, min_priority=min_priority
                    )
                    task_groups = {
                        path: read_task_groups(path)
                        for path in priorities.keys()
                    }
                    selected_line = 0
            elif input_key == "m":
                input_key = stdscr.getkey()
                if input_key in "0123456789":
                    max_tasks = int(input_key)
                    selected_line = 0
        elif input_key == "r":
            priorities = find_task_files(dir_path, min_priority=min_priority)
            task_groups = {
                path: read_task_groups(path) for path in priorities.keys()
            }
            selected_line = 0
            status_line = ""
        elif input_key == "KEY_RESIZE":
            curses.update_lines_cols()
            left_margin = max(1, int((curses.COLS - 100) / 2))
            top_margin = max(1, int((curses.LINES - 30) / 2))
            max_length = curses.COLS - left_margin
            max_lines = curses.LINES - top_margin - 2
            selected_line = 0
    # De-init terminal.
    if "stdscr" in locals():
        stdscr.keypad(False)
        curses.echo()
        curses.nocbreak()
        curses.putp("rmcup".encode())
        curses.endwin()


if __name__ == "__main__":
    main()
