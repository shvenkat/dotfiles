#!/bin/bash

# See https://github.com/erikw/tmux-powerline for tips

USAGE="Usage: $(basename "$0") [-a|--ansi] [-t|--tmux] [-m|--minimal]"
CPU_WARNING_THRESHOLD=20
CPU_CRITICAL_THRESHOLD=101
MEMORY_WARNING_THRESHOLD=80
MEMORY_CRITICAL_THRESHOLD=90
SWAP_WARNING_THRESHOLD=50
SWAP_CRITICAL_THRESHOLD=80
DISK_WARNING_THRESHOLD=75
DISK_CRITICAL_THRESHOLD=90
BATTERY_WARNING_THRESHOLD=50
BATTERY_CRITICAL_THRESHOLD=40

# Parse arguments.
normal_color=''
warning_color=''
critical_color=''
show_info='true'
show_warn='true'
while [[ $# -gt 0 ]]; do
    case "$1" in
        -a|--ansi)
            normal_color='\033[0m'     # Default.
            warning_color='\033[1m'    # Bold.
            critical_color='\033[31m'  # Red.
            shift
            ;;
        -t|--tmux)
            normal_color='#[default]'  # Default.
            warning_color='#[bold]'    # Bold.
            critical_color='#[fg=red]' # Red.
            shift
            ;;
        -m|--minimal)
            show_info='false'
            show_warn='false'
            shift
            ;;
        -h|--help)
            echo "$USAGE"
            exit 0
            ;;
        *)
            echo "$USAGE"
            exit 1
            ;;
    esac
done

# Returns an ANSI color code (or the empty string).
colorize () {
    value="$1"
    suffix="$2"
    warning_threshold="$3"
    critical_threshold="$4"

    if [[ "$value" == '--' ]]; then
        return
    fi
    if [[ $warning_threshold -gt $critical_threshold ]]; then
        if [[ "$value" -le ${critical_threshold} ]]; then
            echo "${critical_color}${value}${suffix}${normal_color}"
        elif [[ "$value" -le ${warning_threshold} ]] \
                 && [[ "$show_warn" == 'true' ]]; then
            echo "${warning_color}${value}${suffix}${normal_color}"
        elif [[ "$show_info" == 'true' ]]; then
            echo "${normal_color}${value}${suffix}${normal_color}"
        fi
    else
        if [[ "$value" -ge ${critical_threshold} ]]; then
            echo "${critical_color}${value}${suffix}${normal_color}"
        elif [[ "$value" -ge ${warning_threshold} ]] \
                 && [[ "$show_warn" == 'true' ]]; then
            echo "${warning_color}${value}${suffix}${normal_color}"
        elif [[ "$show_info" == 'true' ]]; then
            echo "${normal_color}${value}${suffix}${normal_color}"
        fi
    fi
}

# -- main --

# Use OS-specific methods to get values of interest.
case $(uname) in

Darwin)
    cpu_percent=$(top -l2 -s3 \
                  | grep -F 'CPU usage' \
                  | tail -n1 \
                  | sed 's/.*, \([0-9.]*\)% idle/\1/' \
                  | awk '{ printf "%i\n",100 - $1}')
    memory_percent=$(( 100 \
                       - ( $(sysctl -n vm.page_free_count) \
                           + $(sysctl -n vm.page_purgeable_count)) \
                       * $(sysctl -n vm.pagesize) \
                       * 100 \
                       / $(sysctl -n hw.memsize) ))
    swap_percent=$(( 100 \
                     * $(sysctl -n vm.swapusage \
                         | sed -e 's/  /~/g' \
                         | tr '~' '\n' \
                         | grep 'used' \
                         | sed -e 's/^.*= \([0-9]*\).*/\1/') \
                     * 2**20 \
                     / $(sysctl -n hw.memsize) ))
    disk_percent=$(df -h / \
                   | grep '/$' \
                   | grep -o '[0-9]\+%' \
                   | tr -d '%')
    battery_percent=$(pmset -g batt \
                      | grep -o '[0-9]\+%' \
                      | tr -d '%')
    ;;

Linux)
    battery_percent="$((
        100 \
        * "$(cat /sys/class/power_supply/BAT1/charge_now)"
        / "$(cat /sys/class/power_supply/BAT1/charge_full)"
    ))"
    cpu_percent="$(
        top -b -n2 -d3 \
        | grep '^CPU:' \
        | tail -n1 \
        | sed -e 's/^.* \([0-9.]\+\)% idle .*$/\1/' \
        | awk '{ printf "%i\n",100 - $1 }'
    )"
    free_output="$(free)"
    memory_percent="$((
        100 \
        - 100 \
        * $(echo "$free_output" | grep -F 'Mem:' | awk '{ print $7 }') \
        / $(echo "$free_output" | grep -F 'Mem:' | awk '{ print $2 }')
    ))"
    swap_percent="$((
        100 \
        * $(echo "$free_output" | grep -F 'Swap' | awk '{ print $2 }') \
        / $(echo "$free_output" | grep -F 'Mem:' | awk '{ print $2 }')
    ))"
    disk_percent="$(
        df -h / \
        | grep '/$' \
        | grep -o '[0-9]\+%' \
        | tr -d '%'
    )"
    ;;

Cygwin)
    battery_percent='--'
    cpu_percent='--'
    ;;

*)
    battery_percent='--'
    cpu_percent='--'
    ;;

esac


# Format each value.
cpu_status="$(colorize "$cpu_percent" '%C' \
              $CPU_WARNING_THRESHOLD $CPU_CRITICAL_THRESHOLD)"

memory_status="$(colorize "$memory_percent" '%M' \
                 $MEMORY_WARNING_THRESHOLD $MEMORY_CRITICAL_THRESHOLD)"

swap_status="$(colorize "$swap_percent" '%S' \
               $SWAP_WARNING_THRESHOLD $SWAP_CRITICAL_THRESHOLD)"

disk_status="$(colorize "$disk_percent" '%D' \
               $DISK_WARNING_THRESHOLD $DISK_CRITICAL_THRESHOLD)"

battery_status="$(colorize "$battery_percent" '%B' \
                  $BATTERY_WARNING_THRESHOLD $BATTERY_CRITICAL_THRESHOLD)"

# Display all values.
status=''
status="${status:+${status} }${cpu_status}"
status="${status:+${status} }${memory_status}"
status="${status:+${status} }${swap_status}"
status="${status:+${status} }${disk_status}"
status="${status:+${status} }${battery_status}"
echo -e "$status"
